import os
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageSendMessage


# ---------------- CONFIG ---------------- #
CHANNEL_ACCESS_TOKEN = "RgdlVa2/M981fASPei1fz+p8VxMMltZDC3MyZKrfqiHo59UsZye5LmSJx2v7wc8+DT4VxlnVL9RSOlpTQRtFDfj8IIt6jgBLyjj/E/EuepWi3ymkVRg44h72q3NcTGje3vTDHKzPuWYNnrd8OVx1JAdB04t89/1O/w1cDnyilFU="
CHANNEL_SECRET = "fe71e2480dfcac451b531659e5336652"           # << ‡πÉ‡∏™‡πà‡∏à‡∏≤‡∏Å LINE Developers

CSV_FILE = "usage_stats.csv"

app = Flask(__name__)
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# ================= HELPER ================= #
def get_latest_status():
    """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å usage_stats.csv"""
    if not os.path.exists(CSV_FILE):
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", None

    df = pd.read_csv(CSV_FILE)
    if df.empty:
        return "‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤", None

    latest = df.iloc[-1]  # ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    ts = latest["timestamp"]
    people = int(latest["people_count"])
    tables = int(latest["table_used"])
    table_total = int(latest["table_total"])

    text = f"üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: {ts}\nüë• ‡∏Ñ‡∏ô: {people}\nü™ë ‡πÇ‡∏ï‡πä‡∏∞: {tables}/{table_total}"

    return text, df


def generate_graph(df):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    try:
        df["timestamp"] = pd.to_datetime(df["timestamp"])
    except Exception:
        return None

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    cutoff = datetime.now() - timedelta(hours=6)
    df_recent = df[df["timestamp"] >= cutoff]

    if df_recent.empty:
        return None

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
    plt.figure(figsize=(6, 3))
    plt.plot(df_recent["timestamp"], df_recent["people_count"], marker="o", label="People")
    plt.plot(df_recent["timestamp"], df_recent["table_used"], marker="s", label="Tables Used")
    plt.xlabel("Time")
    plt.ylabel("Count")
    plt.title("Co-working Space (last 6h)")
    plt.legend()
    plt.xticks(rotation=30)
    plt.tight_layout()

    img_path = "latest_graph.png"
    plt.savefig(img_path)
    plt.close()

    return img_path


# ================= ROUTES ================= #
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'


# ================= EVENT HANDLER ================= #
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_text = event.message.text.strip()

    if user_text == "‡πÄ‡∏ä‡πá‡∏Ñ‡∏´‡πâ‡∏≠‡∏á CO":
        reply_text, df = get_latest_status()

        if df is not None:
            graph_path = generate_graph(df)
            if graph_path:
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° + ‡∏£‡∏π‡∏õ‡∏Å‡∏£‡∏≤‡∏ü
                line_bot_api.reply_message(
                    event.reply_token,
                    [
                        TextSendMessage(text=reply_text),
                        ImageSendMessage(
                            original_content_url=f"https://{os.getenv('NGROK_URL')}/static/{graph_path}",
                            preview_image_url=f"https://{os.getenv('NGROK_URL')}/static/{graph_path}"
                        )
                    ]
                )
                return

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏≤‡∏ü ‚Üí ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))

    else:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô
        reply_text = f"‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: {user_text}"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))


# ================= MAIN ================= #
if __name__ == "__main__":
    # ‡πÉ‡∏´‡πâ Flask ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå static (‡∏£‡∏π‡∏õ‡∏Å‡∏£‡∏≤‡∏ü)
    static_dir = os.path.join(os.getcwd(), "static")
    os.makedirs(static_dir, exist_ok=True)
    app.static_folder = static_dir
    app.run(port=5000, debug=True)